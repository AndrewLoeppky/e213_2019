# ---
# jupyter:
#   jupytext:
#     cell_metadata_filter: all
#     formats: ipynb,python//py:percent
#     notebook_metadata_filter: all
#     text_representation:
#       extension: .py
#       format_name: percent
#       format_version: '1.2'
#       jupytext_version: 1.0.4
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
#   language_info:
#     codemirror_mode:
#       name: ipython
#       version: 3
#     file_extension: .py
#     mimetype: text/x-python
#     name: python
#     nbconvert_exporter: python
#     pygments_lexer: ipython3
#     version: 3.6.7
#   toc:
#     base_numbering: 1
#     nav_menu: {}
#     number_sections: true
#     sideBar: true
#     skip_h1_title: true
#     title_cell: Table of Contents
#     title_sidebar: Contents
#     toc_cell: true
#     toc_position: {}
#     toc_section_display: true
#     toc_window_display: false
# ---

# %% [markdown] {"toc": true}
# <h1>Table of Contents<span class="tocSkip"></span></h1>
# <div class="toc"><ul class="toc-item"><li><span><a href="#make-the-plot-with-specified-lines-and-labels" data-toc-modified-id="make-the-plot-with-specified-lines-and-labels-1"><span class="toc-item-num">1&nbsp;&nbsp;</span>make the plot with specified lines and labels</a></span></li></ul></div>

# %% [markdown]
# # Simple contour plot with lines
#
# This produces a simple oldschool contour plot with labels

# %% {"nbgrader": {"grade": false, "grade_id": "cell-e58a84ffce31f93a", "locked": true, "schema_version": 1, "solution": false}, "scrolled": true}
import matplotlib.pyplot as plt
import numpy as np

import context

# %%
data = np.load(context.data_dir / "contourline.npz")
x1, y1, psi = data["x1"], data["y1"], data["psi"]
# %% [markdown]
# ## make the plot with specified lines and labels
#
# They don't have to be the same -- you can label only some
# of the lines.  You can control line thickness, dashed/solid/dotted etc.,
# see the matplotlib docs.

# %%
fig, ax = plt.subplots(1, 1, figsize=(15, 10))
the_levels = [0.2, 0.6, 1.0, 1.4, 1.8, 2.0, 2.2, 2.6]
cs = ax.contour(x1, y1, psi, levels=the_levels, colors="k")
ax.set_aspect(1)
ax.clabel(cs, the_levels, fmt="%3.1f")
ax.grid(True)
